//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SC.UI.Web.MVC.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTickets", ReplyAction="http://tempuri.org/IService/GetTicketsResponse")]
        SC.BL.Domain.Ticket[] GetTickets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTickets", ReplyAction="http://tempuri.org/IService/GetTicketsResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket[]> GetTicketsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicket", ReplyAction="http://tempuri.org/IService/GetTicketResponse")]
        SC.BL.Domain.Ticket GetTicket(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicket", ReplyAction="http://tempuri.org/IService/GetTicketResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket> GetTicketAsync(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddTicket", ReplyAction="http://tempuri.org/IService/AddTicketResponse")]
        SC.BL.Domain.Ticket AddTicket(int accountId, string question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddTicket", ReplyAction="http://tempuri.org/IService/AddTicketResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket> AddTicketAsync(int accountId, string question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddHardwareTicket", ReplyAction="http://tempuri.org/IService/AddHardwareTicketResponse")]
        SC.BL.Domain.Ticket AddHardwareTicket(int accountId, string device, string problem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddHardwareTicket", ReplyAction="http://tempuri.org/IService/AddHardwareTicketResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.Ticket> AddHardwareTicketAsync(int accountId, string device, string problem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeTicket", ReplyAction="http://tempuri.org/IService/ChangeTicketResponse")]
        void ChangeTicket(SC.BL.Domain.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeTicket", ReplyAction="http://tempuri.org/IService/ChangeTicketResponse")]
        System.Threading.Tasks.Task ChangeTicketAsync(SC.BL.Domain.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeTicketStateToClosed", ReplyAction="http://tempuri.org/IService/ChangeTicketStateToClosedResponse")]
        void ChangeTicketStateToClosed(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeTicketStateToClosed", ReplyAction="http://tempuri.org/IService/ChangeTicketStateToClosedResponse")]
        System.Threading.Tasks.Task ChangeTicketStateToClosedAsync(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveTicket", ReplyAction="http://tempuri.org/IService/RemoveTicketResponse")]
        void RemoveTicket(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveTicket", ReplyAction="http://tempuri.org/IService/RemoveTicketResponse")]
        System.Threading.Tasks.Task RemoveTicketAsync(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicketResponses", ReplyAction="http://tempuri.org/IService/GetTicketResponsesResponse")]
        SC.BL.Domain.TicketResponse[] GetTicketResponses(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicketResponses", ReplyAction="http://tempuri.org/IService/GetTicketResponsesResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse[]> GetTicketResponsesAsync(int ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddResponses", ReplyAction="http://tempuri.org/IService/AddResponsesResponse")]
        SC.BL.Domain.TicketResponse AddResponses(int ticketNumber, string response, bool isClientResponse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddResponses", ReplyAction="http://tempuri.org/IService/AddResponsesResponse")]
        System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse> AddResponsesAsync(int ticketNumber, string response, bool isClientResponse);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : SC.UI.Web.MVC.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<SC.UI.Web.MVC.ServiceReference.IService>, SC.UI.Web.MVC.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SC.BL.Domain.Ticket[] GetTickets() {
            return base.Channel.GetTickets();
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket[]> GetTicketsAsync() {
            return base.Channel.GetTicketsAsync();
        }
        
        public SC.BL.Domain.Ticket GetTicket(int ticketNumber) {
            return base.Channel.GetTicket(ticketNumber);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket> GetTicketAsync(int ticketNumber) {
            return base.Channel.GetTicketAsync(ticketNumber);
        }
        
        public SC.BL.Domain.Ticket AddTicket(int accountId, string question) {
            return base.Channel.AddTicket(accountId, question);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket> AddTicketAsync(int accountId, string question) {
            return base.Channel.AddTicketAsync(accountId, question);
        }
        
        public SC.BL.Domain.Ticket AddHardwareTicket(int accountId, string device, string problem) {
            return base.Channel.AddHardwareTicket(accountId, device, problem);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.Ticket> AddHardwareTicketAsync(int accountId, string device, string problem) {
            return base.Channel.AddHardwareTicketAsync(accountId, device, problem);
        }
        
        public void ChangeTicket(SC.BL.Domain.Ticket ticket) {
            base.Channel.ChangeTicket(ticket);
        }
        
        public System.Threading.Tasks.Task ChangeTicketAsync(SC.BL.Domain.Ticket ticket) {
            return base.Channel.ChangeTicketAsync(ticket);
        }
        
        public void ChangeTicketStateToClosed(int ticketNumber) {
            base.Channel.ChangeTicketStateToClosed(ticketNumber);
        }
        
        public System.Threading.Tasks.Task ChangeTicketStateToClosedAsync(int ticketNumber) {
            return base.Channel.ChangeTicketStateToClosedAsync(ticketNumber);
        }
        
        public void RemoveTicket(int ticketNumber) {
            base.Channel.RemoveTicket(ticketNumber);
        }
        
        public System.Threading.Tasks.Task RemoveTicketAsync(int ticketNumber) {
            return base.Channel.RemoveTicketAsync(ticketNumber);
        }
        
        public SC.BL.Domain.TicketResponse[] GetTicketResponses(int ticketNumber) {
            return base.Channel.GetTicketResponses(ticketNumber);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse[]> GetTicketResponsesAsync(int ticketNumber) {
            return base.Channel.GetTicketResponsesAsync(ticketNumber);
        }
        
        public SC.BL.Domain.TicketResponse AddResponses(int ticketNumber, string response, bool isClientResponse) {
            return base.Channel.AddResponses(ticketNumber, response, isClientResponse);
        }
        
        public System.Threading.Tasks.Task<SC.BL.Domain.TicketResponse> AddResponsesAsync(int ticketNumber, string response, bool isClientResponse) {
            return base.Channel.AddResponsesAsync(ticketNumber, response, isClientResponse);
        }
    }
}
